<!DOCTYPE html>
<html lang="en">
<head>
<meta charset="UTF-8" />
<meta name="viewport" content="width=device-width, initial-scale=1" />
<title>RHITTA Restaurant Interactive Menu</title>
<style>
  /* Reset & base */
  * {
    box-sizing: border-box;
  }
  body {
    font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
    margin: 0;
    background: #fafafa;
    color: #333;
  }
  header {
    background: #b71c1c;
    color: white;
    padding: 1rem;
    text-align: center;
    font-size: 1.8rem;
    font-weight: 700;
    letter-spacing: 2px;
    user-select: none;
  }
  main {
    max-width: 1000px;
    margin: 1rem auto 5rem auto;
    padding: 0 1rem 1rem 1rem;
  }
  /* Category tabs */
  .tabs {
    display: flex;
    justify-content: center;
    margin-bottom: 1rem;
    flex-wrap: wrap;
    gap: 0.5rem;
  }
  .tab {
    background: #e0e0e0;
    color: #333;
    padding: 0.5rem 1.2rem;
    border-radius: 25px;
    cursor: pointer;
    transition: background-color 0.3s ease, color 0.3s ease;
    user-select: none;
    font-weight: 600;
  }
  .tab.active {
    background: #b71c1c;
    color: white;
  }

  /* Dish cards */
  .dish-list {
    display: grid;
    grid-template-columns: repeat(auto-fit,minmax(250px,1fr));
    gap: 1rem;
    margin-bottom: 2rem;
  }
  .dish-card {
    background: white;
    padding: 1rem;
    border-radius: 12px;
    box-shadow: 0 3px 8px rgb(0 0 0 / 0.1);
    display: flex;
    flex-direction: column;
    user-select: none;
  }
  .dish-image {
    width: 100%;
    height: 160px;
    border-radius: 10px;
    object-fit: cover;
    margin-bottom: 0.6rem;
  }
  .dish-name {
    font-size: 1.2rem;
    margin-bottom: 0.3rem;
    font-weight: 700;
  }
  .dish-price {
    font-weight: 700;
    color: #b71c1c;
    margin-bottom: 0.4rem;
  }
  .dish-desc {
    font-size: 0.9rem;
    flex-grow: 1;
    margin-bottom: 0.6rem;
    color: #555;
  }
  .allergens {
    font-size: 0.8rem;
    color: #a03131;
    margin-bottom: 0.6rem;
  }
  .add-btn {
    background: #b71c1c;
    border: none;
    color: white;
    padding: 0.5rem;
    border-radius: 25px;
    cursor: pointer;
    font-weight: 700;
    transition: background-color 0.3s ease;
  }
  .add-btn:hover {
    background: #8a1414;
  }

  /* Shopping cart */
  .cart-container {
    position: fixed;
    bottom: 0;
    right: 0;
    max-width: 400px;
    width: 100%;
    background: white;
    border-top-left-radius: 20px;
    border-top-right-radius: 20px;
    box-shadow: 0 -3px 15px rgba(0,0,0,0.25);
    max-height: 60vh;
    overflow-y: auto;
    transform: translateY(100%);
    transition: transform 0.3s ease;
    z-index: 1000;
  }
  .cart-container.active {
    transform: translateY(0);
  }
  .cart-header {
    padding: 1rem 1.5rem;
    background: #b71c1c;
    color: white;
    font-weight: 700;
    font-size: 1.3rem;
    position: sticky;
    top: 0;
  }
  .cart-list {
    list-style: none;
    padding: 0 1.5rem;
    margin: 0;
  }
  .cart-item {
    display: flex;
    justify-content: space-between;
    padding: 0.6rem 0;
    border-bottom: 1px solid #eee;
  }
  .cart-item-name {
    font-weight: 600;
  }
  .cart-item-qty {
    margin: 0 8px;
  }
  .cart-item-price {
    color: #b71c1c;
    font-weight: 700;
  }
  .cart-footer {
    padding: 1rem 1.5rem;
    border-top: 1px solid #eee;
    font-weight: 700;
    font-size: 1.2rem;
    display: flex;
    justify-content: space-between;
  }
  .cart-toggle-btn {
    position: fixed;
    bottom: 1rem;
    right: 1rem;
    background: #b71c1c;
    color: white;
    border: none;
    border-radius: 50%;
    width: 55px;
    height: 55px;
    font-size: 1.8rem;
    cursor: pointer;
    box-shadow: 0 4px 12px rgba(183,28,28,0.6);
    z-index: 1100;
    display: flex;
    align-items: center;
    justify-content:center;
    user-select:none;
  }
  .cart-toggle-btn:hover {
    background: #8a1414;
  }

  /* Responsive tweaks */
  @media (max-width: 600px) {
    body {
      font-size: 14px;
    }
    .dish-image {
      height: 140px;
    }
    main {
      margin-bottom: 6rem;
      padding: 0 0.5rem;
    }
    .cart-container {
      max-width: 100%;
      border-radius: 0;
      max-height: 70vh;
    }
  }

</style>
</head>
<body>
<header>RHITTA Restaurant Menu</header>
<main>
  <nav class="tabs" role="tablist" aria-label="Menu Categories">
    <button class="tab active" data-category="main" role="tab" aria-selected="true" tabindex="0">Main</button>
    <button class="tab" data-category="appetizer" role="tab" aria-selected="false" tabindex="-1">Appetizer</button>
    <button class="tab" data-category="dessert" role="tab" aria-selected="false" tabindex="-1">Dessert</button>
    <button class="tab" data-category="drink" role="tab" aria-selected="false" tabindex="-1">Drink</button>
  </nav>
  <section id="dish-container" role="tabpanel" aria-live="polite"></section>
</main>

<button class="cart-toggle-btn" aria-label="Toggle Shopping Cart">🛒</button>
<aside class="cart-container" aria-label="Shopping Cart" tabindex="0">
  <h2 class="cart-header">Shopping Cart</h2>
  <ul class="cart-list" aria-live="polite" aria-relevant="additions removals"></ul>
  <div class="cart-footer">
    <span>Total:</span>
    <span class="cart-total" aria-live="polite">$0.00</span>
  </div>
</aside>

<script>
  const dishes = [
    {
      id: 1,
      category: 'main',
      name: 'Grilled Salmon',
      price: 18.99,
      description: 'Fresh salmon fillet grilled to perfection served with seasonal vegetables.',
      image: 'https://images.pexels.com/photos/46239/salmon-dish-food-meal-46239.jpeg?auto=compress&cs=tinysrgb&dpr=2&h=160',
      allergens: ['Fish', 'Soy']
    },
    {
      id: 2,
      category: 'main',
      name: 'Beef Steak',
      price: 22.50,
      description: 'Juicy medium rare beef steak served with mashed potatoes and salad.',
      image: 'https://images.pexels.com/photos/675951/pexels-photo-675951.jpeg?auto=compress&cs=tinysrgb&dpr=2&h=160',
      allergens: ['None']
    },
    {
      id: 3,
      category: 'appetizer',
      name: 'Caesar Salad',
      price: 7.20,
      description: 'Crisp romaine lettuce with Caesar dressing, croutons, and parmesan cheese.',
      image: 'https://images.pexels.com/photos/1640777/pexels-photo-1640777.jpeg?auto=compress&cs=tinysrgb&dpr=2&h=160',
      allergens: ['Dairy', 'Egg']
    },
    {
      id: 4,
      category: 'appetizer',
      name: 'Spring Rolls',
      price: 5.50,
      description: 'Fresh vegetable spring rolls served with sweet chili sauce.',
      image: 'https://images.pexels.com/photos/1028715/pexels-photo-1028715.jpeg?auto=compress&cs=tinysrgb&dpr=2&h=160',
      allergens: ['Gluten']
    },
    {
      id: 5,
      category: 'dessert',
      name: 'Chocolate Cake',
      price: 6.50,
      description: 'Rich and moist chocolate sponge cake topped with chocolate ganache.',
      image: 'https://images.pexels.com/photos/45202/chocolate-cake-cake-dessert-45202.jpeg?auto=compress&cs=tinysrgb&dpr=2&h=160',
      allergens: ['Gluten', 'Dairy', 'Egg']
    },
    {
      id: 6,
      category: 'dessert',
      name: 'Fruit Tart',
      price: 6.00,
      description: 'Buttery tart filled with pastry cream and topped with fresh seasonal fruits.',
      image: 'https://images.pexels.com/photos/3026803/pexels-photo-3026803.jpeg?auto=compress&cs=tinysrgb&dpr=2&h=160',
      allergens: ['Gluten', 'Dairy']
    },
    {
      id: 7,
      category: 'drink',
      name: 'Fresh Lemonade',
      price: 3.50,
      description: 'Refreshing homemade lemonade with a hint of mint.',
      image: 'https://images.pexels.com/photos/257816/pexels-photo-257816.jpeg?auto=compress&cs=tinysrgb&dpr=2&h=160',
      allergens: []
    },
    {
      id: 8,
      category: 'drink',
      name: 'Iced Coffee',
      price: 4.20,
      description: 'Cold brewed coffee served with milk and ice.',
      image: 'https://images.pexels.com/photos/302899/pexels-photo-302899.jpeg?auto=compress&cs=tinysrgb&dpr=2&h=160',
      allergens: ['Dairy']
    },
  ];

  const allergenIcons = {
    'Gluten': '🌾',
    'Dairy': '🥛',
    'Egg': '🥚',
    'Fish': '🐟',
    'Soy': '🌱',
    'None': '✔️'
  };

  let currentCategory = 'main';
  let cart = {};

  const tabs = document.querySelectorAll('.tab');
  const dishContainer = document.getElementById('dish-container');
  const cartToggleBtn = document.querySelector('.cart-toggle-btn');
  const cartContainer = document.querySelector('.cart-container');
  const cartList = document.querySelector('.cart-list');
  const cartTotalElem = document.querySelector('.cart-total');

  function updateTabs(selectedCategory) {
    tabs.forEach(tab => {
      if (tab.dataset.category === selectedCategory) {
        tab.classList.add('active');
        tab.setAttribute('aria-selected', 'true');
        tab.setAttribute('tabindex', '0');
      } else {
        tab.classList.remove('active');
        tab.setAttribute('aria-selected', 'false');
        tab.setAttribute('tabindex', '-1');
      }
    });
  }

  function renderDishes(category) {
    dishContainer.innerHTML = '';
    const filteredDishes = dishes.filter(d => d.category === category);
    if (filteredDishes.length === 0) {
      dishContainer.innerHTML = '<p>No dishes available in this category.</p>';
      return;
    }
    const fragment = document.createDocumentFragment();

    filteredDishes.forEach(dish => {
      const card = document.createElement('article');
      card.className = 'dish-card';
      card.setAttribute('tabindex', '0');
      card.setAttribute('aria-label', `${dish.name}, ${dish.price.toLocaleString('en-US', {style: 'currency', currency: 'USD'})}`);
      card.innerHTML = `
        <img src="${dish.image}" alt="${dish.name}" class="dish-image" />
        <h3 class="dish-name">${dish.name}</h3>
        <p class="dish-price">${dish.price.toLocaleString('en-US', {style: 'currency', currency: 'USD'})}</p>
        <p class="dish-desc">${dish.description}</p>
        <p class="allergens" aria-label="Allergens">${formatAllergens(dish.allergens)}</p>
        <button class="add-btn" aria-label="Add ${dish.name} to cart" data-id="${dish.id}">Add to Cart</button>
      `;
      fragment.appendChild(card);
    });
    dishContainer.appendChild(fragment);
  }

  function formatAllergens(allergens) {
    if (!allergens || allergens.length === 0) return 'Allergen: None';
    if (allergens.includes('None')) return 'Allergen: None';
    return 'Allergens: ' + allergens.map(a => allergenIcons[a] ? `${allergenIcons[a]} ${a}` : a).join(', ');
  }

  function addToCart(id) {
    if (!cart[id]) {
      const dish = dishes.find(d => d.id === id);
      if (!dish) return;
      cart[id] = {
        ...dish,
        quantity: 1
      };
    } else {
      cart[id].quantity += 1;
    }
    renderCart();
    showCart();
  }

  function removeFromCart(id) {
    delete cart[id];
    renderCart();
  }

  function changeQuantity(id, delta) {
    if (!cart[id]) return;
    cart[id].quantity += delta;
    if (cart[id].quantity <= 0) {
      removeFromCart(id);
    } else {
      renderCart();
    }
  }

  function renderCart() {
    cartList.innerHTML = '';
    const fragment = document.createDocumentFragment();
    let total = 0;

    Object.values(cart).forEach(item => {
      total += item.price * item.quantity;
      const li = document.createElement('li');
      li.className = 'cart-item';
      li.setAttribute('tabindex', '0');
      li.innerHTML = `
        <span class="cart-item-name">${item.name}</span>
        <span>
          <button aria-label="Decrease quantity of ${item.name}" class="qty-btn" data-action="dec" data-id="${item.id}">-</button>
          <span class="cart-item-qty" aria-live="polite" aria-atomic="true">${item.quantity}</span>
          <button aria-label="Increase quantity of ${item.name}" class="qty-btn" data-action="inc" data-id="${item.id}">+</button>
          <button aria-label="Remove ${item.name} from cart" class="remove-btn" data-id="${item.id}" title="Remove item" style="margin-left:8px;color:#b71c1c; background:none; border:none; font-weight:bold; cursor:pointer;">×</button>
        </span>
        <span class="cart-item-price">${(item.price * item.quantity).toLocaleString('en-US', {style: 'currency', currency: 'USD'})}</span>
      `;
      fragment.appendChild(li);
    });

    if (total === 0) {
      const emptyMsg = document.createElement('p');
      emptyMsg.textContent = 'Your cart is empty.';
      emptyMsg.style.padding = '1rem';
      cartList.appendChild(emptyMsg);
      cartTotalElem.textContent = '$0.00';
    } else {
      cartList.appendChild(fragment);
      cartTotalElem.textContent = total.toLocaleString('en-US', {style: 'currency', currency: 'USD'});
    }
  }

  function showCart() {
    cartContainer.classList.add('active');
  }

  function hideCart() {
    cartContainer.classList.remove('active');
  }

  // Event Listeners
  tabs.forEach(tab => {
    tab.addEventListener('click', () => {
      const cat = tab.dataset.category;
      if (cat === currentCategory) return;
      currentCategory = cat;
      updateTabs(currentCategory);
      renderDishes(currentCategory);
    });
  });

  dishContainer.addEventListener('click', e => {
    if (e.target.classList.contains('add-btn')) {
      const id = parseInt(e.target.dataset.id);
      addToCart(id);
    }
  });

  cartToggleBtn.addEventListener('click', () => {
    if (cartContainer.classList.contains('active')) {
      hideCart();
    } else {
      showCart();
    }
  });

  cartList.addEventListener('click', e => {
    if (e.target.classList.contains('qty-btn')) {
      const id = parseInt(e.target.dataset.id);
      const action = e.target.dataset.action;
      if (action === 'inc') {
        changeQuantity(id, 1);
      } else if (action === 'dec') {
        changeQuantity(id, -1);
      }
    }
    if (e.target.classList.contains('remove-btn')) {
      const id = parseInt(e.target.dataset.id);
      removeFromCart(id);
    }
  });

  // Keyboard accessibility for tabs
  let tabFocus = 0;
  document.querySelector('.tabs').addEventListener('keydown', (e) => {
    if(e.key === "ArrowRight" || e.key === "ArrowLeft") {
      tabs[tabFocus].setAttribute("tabindex", -1);
      if(e.key === "ArrowRight") {
        tabFocus = (tabFocus + 1) % tabs.length;
      } else if(e.key === "ArrowLeft") {
        tabFocus = (tabFocus - 1 + tabs.length) % tabs.length;
      }
      tabs[tabFocus].setAttribute("tabindex", 0);
      tabs[tabFocus].focus();
    }
  });

  // Initial render
  updateTabs(currentCategory);
  renderDishes(currentCategory);
  renderCart();
</script>
</body>
</html>

